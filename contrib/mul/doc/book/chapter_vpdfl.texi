
@chapsummary
Probability is the only calculus of uncertainty.
@endchapsummary

The vpdfl several classes for representing and using
multivariate probability density functions (@acronym{PDF}s).

Each @acronym{PDF} comes as a builder-model-sampler triplet of objects.

@multitable {Derived Classes:} {vpdfl_axis_gaussian_builder}  {vpdfl_axis_gaussian}  {vpdfl_axis_gaussian_sampler}  
@item Base Class:
@tab vpdfl_builder_base
@tab vpdfl_pdf_base
@tab vpdfl_pdf_sampler
@item Derived Classes:
@tab vpdfl_axis_gaussian_builder
@tab vpdfl_axis_gaussian
@tab vpdfl_axis_gaussian_sampler
@item
@tab vpdfl_gaussian_builder
@tab vpdfl_gaussian
@tab vpdfl_gaussian_sampler
@end multitable

The builders are used to compute the model data (eg the means, variances
etc) for the models. The models are used to calculate densities,
cumulative probabilities, gradients, etc. Samplers are used to generate samples
from a given model. The samples are produced with a @acronym{PDF} given by its model.


@section Strategy Pattern
This code is an example of the strategy pattern
(@cite{Gamma, et al. Design Patterns, Addison Wesley, 1995}.) It is possible to
write code that builds and uses a @acronym{PDF}, where your code does not itself
know what sort of @acronym{PDF} is being used.

@section vpdfl_pdf_base
This is the base class for Multi-Variate @acronym{PDF} classes.
It also records the mean and variance in each dimension. Derived classes may
record more information (eg covariance matrix etc).
For cases where the distributions of parameters are multi-modal,
the number and centres of each peak can be recorded. This is particularly
useful for non-linear and mixture model representations of the parameter
distributions.
@heading Main functions
@table @code

@item vpdfl_pdf_sampler* sampler()
Create appropriate sampler class on heap and return pointer

@item int n_dims() const
Dimensionality of vector space represented

@item const vnl_vector<double>& mean() const
Mean vector for distribution

@item const vnl_vector<double>& variance()
Vector giving variance along each dimension

@item int n_peaks() const
Number of peaks of distribution (1 unless multimodal)

@item const vnl_vector<double>& peak(int i) const
Position of the i'th peak (useful for multi-modal @acronym{PDF}s)

@item double log_p(x)
Log of probability density at x

@item double operator(x)
Probability density at x.

@item void gradient(g,  x, p)
Gradient of @acronym{PDF} at x

@item double log_prob_thresh(pass_proportion)
Compute threshold for @acronym{PDF} to pass a given proportion

@item void nearest_plausible(x; log_p_min)
Compute nearest point to x which has a log density above a threshold
@end table

@section vpdfl_builder_base
A base class for objects which build Multivariate @acronym{PDF} models from sets
of vectors supplied in a mbl_data_wrapper<vnl_vector<double> > derived iterator.

@heading Main functions
@table @code
@item vpdfl_pdf_base* new_model()
Create a new model of appropriate type on heap and return pointer

@item void build(model, data)
Build the model from the vectors supplied in data

@item void weighted_build(model, data, weights)
Build the model from the supplied vectors, allowing for given weights
@end table

@section vpdfl_base_sampler
This generates samples drawn from the distribution described by a vpdfl_pdf_base.
Note that unlike other types in the library, the samplers don't contain useful
state, and cannot be saved.

@heading Main functions
@table @code
@item const vpdfl_pdf_base& model() const
The vpdfl_pdf_base for which this is a sampler

@item void set_model(pdf)
Set model for which this is an instance

@item void sample(x)
Draw random sample from distribution
@end table


@section Derived Classes

@table @code
@item vpdfl_axis_gaussian
Gaussian @acronym{PDF} aligned with the cartesian axes.

@item vpdfl_gaussian
General gaussian at arbitrary orientation. Axes are
defined by a set of eigenvectors, eigenvecs(), and their associated eigenvalues,
eigenvals() of the covariance matrix of the original data.

@item vpdfl_pc_gaussian
A gaussian at arbitrary orientation. The covariance in the direction of the smaller
eigenvalues are assumed for efficiency to be circular.

@item vpdfl_mixture_pdf
Mixture model containing two or more components (each a vpdfl_pdf_base derived class)
@end table

@section Examples

Suppose we wish to compute a multivariate gaussian from a set of
vectors, then estimate the probability that each vector was generated by
the distribution.

@example
RD_Array<RD_Vector> data(n);
// Load in the vectors
....

// Define what type of builder to use.  In this case we want a MVGaussian
TC_MVGaussianBuilder mvgauss_builder;
TC_MVPDFBuilderBase *builder = &mvgauss_builder;

// Create an iterator object to pass the data in
TC_VectorDataArray v_data(data.dataPtr(),data.nelems());

// Generate model to build
TC_MVPDFBase *model = builder->newModel();
// Build the model from the data
builder->build(*model,v_data);

// Now test each vector
TC_MVPDFInstanceBase *inst = model->instance();
for (int i=0;i<data.nelems();++i)
    cout<<"log(P(v(i))) = "<<inst->logP(data(i))<<endl;

// Tidy up
delete model;
delete inst;
@end example
