// This is brl/bpro/core/vpgl_pro/processes/vpgl_generate_3d_point_process_from_depth_process.cxx
#include <bprb/bprb_func_process.h>
//:
// \file

#include <vcl_iostream.h>
#include <vcl_fstream.h>
#include <vpgl/vpgl_camera.h>
#include <vpgl/vpgl_perspective_camera.h>
#include <vpgl/vpgl_calibration_matrix.h>
#include <vpgl/algo/vpgl_triangulate_points.h>
#include <vsl/vsl_binary_io.h>
namespace vpgl_generate_3d_point_from_cams_process_globals
{
    const unsigned n_inputs_ = 6;
    const unsigned n_outputs_ = 3;
}
//: Init function
bool vpgl_generate_3d_point_from_cams_process_cons(bprb_func_process& pro)
{
    using namespace vpgl_generate_3d_point_from_cams_process_globals;

    //process takes 1 input
    vcl_vector<vcl_string> input_types_(n_inputs_);
    input_types_[0] = "vpgl_camera_double_sptr";
    input_types_[1] = "float";
    input_types_[2] = "float";
    input_types_[3] = "vpgl_camera_double_sptr";
    input_types_[4] = "float";
    input_types_[5] = "float";
    
    // process has 1 output:
    // output[0]: scene sptr
    vcl_vector<vcl_string>  output_types_(n_outputs_);
    output_types_[0] = "float"; //X
    output_types_[1] = "float"; //Y
    output_types_[2] = "float"; //Z

    bool good = pro.set_input_types(input_types_) &&
                pro.set_output_types(output_types_);
    return good;
}

//: Execute the process
bool vpgl_generate_3d_point_from_cams_process(bprb_func_process& pro)
{
   // Sanity check
  if (!pro.verify_inputs()) {
    vcl_cerr << "vpgl_generate_3d_point_from_cams_process: Invalid inputs\n";
    return false;
  }
  // get the inputs
  unsigned i=0;
  vpgl_camera_double_sptr cam1_ptr = pro.get_input<vpgl_camera_double_sptr>(i++);
  float u1 = pro.get_input<float>(i++);
  float v1 = pro.get_input<float>(i++);
  vpgl_camera_double_sptr cam2_ptr = pro.get_input<vpgl_camera_double_sptr>(i++);
  float u2 = pro.get_input<float>(i++);
  float v2 = pro.get_input<float>(i++);

  //cast cams
  vpgl_perspective_camera<double>* cam1 = dynamic_cast<vpgl_perspective_camera<double>*>(cam1_ptr.ptr());
  vpgl_perspective_camera<double>* cam2 = dynamic_cast<vpgl_perspective_camera<double>*>(cam2_ptr.ptr());
  if (!cam1 || !cam2) {
    vcl_cerr << "vpgl_generate_3d_point_from_cams_process: couldn't cast camera\n";
    return false;
  }

  //vector of cams, vector of points
  vcl_vector<vpgl_perspective_camera<double> > cams; 
  cams.push_back(*cam1);
  cams.push_back(*cam2);
  
  vcl_vector<vgl_point_2d<double> > points;
  points.push_back(vgl_point_2d<double>(u1,v1));
  points.push_back(vgl_point_2d<double>(u2,v2));
  
  //: Calculates the best 3D point corresponding to a set of 2D camera points.
  // Takes in a list of points and cameras, and finds the
  // least-squared solution to the intersection of the rays
  // generated by the points. Assumes that point i is viewed
  // by camera i. The result is placed into point_3d. Returns
  // the sum of squared errors.
  vgl_point_3d<double> point_3d;
  double error = vpgl_triangulate_points::triangulate( points, cams, point_3d );
  vcl_cout<<"RAYS INTERSECT AT POINT: "<<point_3d<< " with error "<<error<<vcl_endl;
  
  pro.set_output_val<float>(0, (float)point_3d.x());
  pro.set_output_val<float>(1, (float)point_3d.y());
  pro.set_output_val<float>(2, (float)point_3d.z());
  return true;
}
