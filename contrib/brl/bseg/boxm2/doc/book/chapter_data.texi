@chapsummary
Data structures used by the Boxm2 library
@endchapsummary


@section Boxm2 Scene data structures
The data structures used in boxm2 are optimized to be used both by a CPU and GPU.  
A scene is composed of @code{blocks}, which are specified in the @code{scene.xml} file.  
Each @code{block} is a fixed grid of octrees, also referred to as @code{sub_blocks} in 
the code.  The dimension of a @code{sub_block} and the number of @code{sub_blocks} in 
each block are specified in the @code{scene.xml} file.  

The voxel structure of each block is encoded in its own file which is located in the
directory specified by the @code{scene.xml} file.  Each block has a unique 
@code{boxm2_block_id}, which consists of three integers.  This block id 
is how blocks and their corresponding data are identified on disk.  


@subsection Boxm2 Block: octree based voxel structure

Discuss:

    - Tree structure (bit_tree)
    
    - Data Index and Buffer Index storage (in bits [10,11] [12,13])
    
    - Data indexing algorithm given bit index 

@subsection Data structures.

Discuss:

    - each data structure mirroring (index across data arrays will always correspond
    with the same voxel (leaf cell).  

@section Boxm2 Basic

Discuss: 

    - Wrappers
    
    - Sharing data pointer (specify whether it owns the pointer or not and will delete it upon destruction).

@subsection boxm2_array_Nd<T>

Discuss:
    
    - Each boxm2_array_Nd<T> type provides dimensional indexing, i.e.
    boxm2_array_3d array(i,j,k) will be valid.  
    
