#ifndef vsol_point_3d_h
#define vsol_point_3d_h
//*****************************************************************************
//
// .NAME vsol_point_3d - Point of a 3D space
// .LIBRARY vsol
// .INCLUDE vsol/vsol_point_3d.h
// .FILE    vsol/vsol_point_3d.cxx
//
// .SECTION Author
// François BERTEL
//
// .SECTION Modifications
// 2000/09/18 Peter Tu        connected to vgl
// 2000/06/17 Peter Vanroose  Implemented all operator==()s and type info
// 2000/05/12 François BERTEL Replacement of vnl_vector_fixed<double,3> by
//                            vnl_double_3
// 2000/05/03 François BERTEL Creation
//*****************************************************************************

class vsol_point_3d;

//*****************************************************************************
// External declarations for values
//*****************************************************************************
#include <vsol/vsol_point_3d_sptr.h>
#include <vsol/vsol_spatial_object_3d.h>
#include <vnl/vnl_double_3.h>
#include <vgl/vgl_point_3d.h>

class vsol_point_3d
  :public vsol_spatial_object_3d
{
  //***************************************************************************
  // Initialization
  //***************************************************************************
public:
  //---------------------------------------------------------------------------
  //: Constructor from cartesian coordinates `new_x', `new_y', `new_z'
  //---------------------------------------------------------------------------
  explicit vsol_point_3d(const double new_x,
                         const double new_y,
                         const double new_z);

  //---------------------------------------------------------------------------
  //: Copy constructor
  //---------------------------------------------------------------------------
  vsol_point_3d(const vsol_point_3d &other);

  //---------------------------------------------------------------------------
  //: Destructor
  //---------------------------------------------------------------------------
  virtual ~vsol_point_3d();

  //---------------------------------------------------------------------------
  //: Clone `this': creation of a new object and initialization
  //  See Prototype pattern
  //---------------------------------------------------------------------------
  virtual vsol_spatial_object_3d_sptr clone(void) const;

  //***************************************************************************
  // Access
  //***************************************************************************

  //---------------------------------------------------------------------------
  //: Return the abscissa
  //---------------------------------------------------------------------------
  virtual double x(void) const;

  //---------------------------------------------------------------------------
  //: Return the ordinate
  //---------------------------------------------------------------------------
  virtual double y(void) const;

  //---------------------------------------------------------------------------
  //: Return the cote
  //---------------------------------------------------------------------------
  virtual double z(void) const;

  //***************************************************************************
  // Comparison
  //***************************************************************************

  //---------------------------------------------------------------------------
  //: Has `this' the same coordinates than `other' ?
  //---------------------------------------------------------------------------
  virtual bool operator==(const vsol_point_3d &other) const;
  virtual bool operator==(const vsol_spatial_object_3d& obj) const; // virtual of vsol_spatial_object_3d

#if 0
  //---------------------------------------------------------------------------
  //: Has `this' not the same coordinates than `other' ?
  //---------------------------------------------------------------------------
  virtual bool operator!=(const vsol_point_3d &other) const;
#endif

  //***************************************************************************
  // Status report
  //***************************************************************************

  //---------------------------------------------------------------------------
  //: Return the real type of a point. It is a POINT
  //---------------------------------------------------------------------------
  enum vsol_spatial_object_3d_type spatial_type(void) const;

  //---------------------------------------------------------------------------
  //: Compute the bounding box of `this'
  //---------------------------------------------------------------------------
  virtual void compute_bounding_box(void);

  //***************************************************************************
  // Status setting
  //***************************************************************************

  //---------------------------------------------------------------------------
  //: Set the abscissa
  //---------------------------------------------------------------------------
  virtual void set_x(const double new_x);

  //---------------------------------------------------------------------------
  //: Set the ordinate
  //---------------------------------------------------------------------------
  virtual void set_y(const double new_y);

  //---------------------------------------------------------------------------
  //: Set the cote
  //---------------------------------------------------------------------------
  virtual void set_z(const double new_z);

  //***************************************************************************
  // Basic operations
  //***************************************************************************

  //---------------------------------------------------------------------------
  //: Return the distance (N2) between `this' and `other'
  //---------------------------------------------------------------------------
  virtual double distance(const vsol_point_3d &other) const;
  virtual double distance(vsol_point_3d_sptr other) const;

  //---------------------------------------------------------------------------
  //: Return the middle point between `this' and `other'
  //---------------------------------------------------------------------------
  virtual vsol_point_3d_sptr middle(const vsol_point_3d &other) const;

  //---------------------------------------------------------------------------
  //: Add `v' to `this'
  //---------------------------------------------------------------------------
  virtual void add_vector(const vnl_double_3 &v);

  //---------------------------------------------------------------------------
  //: Add `v' and `this'
  //---------------------------------------------------------------------------
  virtual vsol_point_3d_sptr
  plus_vector(const vnl_double_3 &v) const;

  //---------------------------------------------------------------------------
  //: Return the vector `this',`other'. Has to be deleted manually
  //---------------------------------------------------------------------------
  virtual vnl_double_3 *
  to_vector(const vsol_point_3d &other) const;

  //***************************************************************************
  // Implementation
  //***************************************************************************
private:
  //---------------------------------------------------------------------------
  //Description: Coordinates of the point
  //---------------------------------------------------------------------------
  vgl_point_3d<double> *p_;
};

#endif // vsol_point_3d_h
