#ifndef VSOL_CURVE_3D_H
#define VSOL_CURVE_3D_H
//*****************************************************************************
//
// .NAME vsol_curve_3d - Abstract curve in a 3D space
// .LIBRARY vsol
// .INCLUDE vsol/vsol_curve_3d.h
// .FILE    vsol/vsol_curve_3d.cxx
//
// .SECTION Author
// François BERTEL
//
// .SECTION Modifications
// 2000/06/17 Peter Vanroose  Implemented all operator==()s and type info
// 2000/05/03 François BERTEL Creation
//*****************************************************************************

class vsol_curve_3d;

//*****************************************************************************
// External declarations for values
//*****************************************************************************
#include <vsol/vsol_curve_3d_ref.h>
#include <vsol/vsol_spatial_object_3d.h>

#include <vsol/vsol_point_3d_ref.h>

class vsol_curve_3d
  :public vsol_spatial_object_3d
{
public:
  enum vsol_curve_3d_type
  { CURVE_NO_TYPE=0,
    LINE,
    CONIC,
    NUM_REGION_TYPES
  };

  //***************************************************************************
  // Initialization
  //***************************************************************************
public:
  //---------------------------------------------------------------------------
  //: Destructor
  //---------------------------------------------------------------------------
  virtual ~vsol_curve_3d();

  //---------------------------------------------------------------------------
  //: Return the spatial type
  //---------------------------------------------------------------------------
  vsol_spatial_object_3d_type spatial_type(void) const { return vsol_spatial_object_3d::CURVE; }

  //---------------------------------------------------------------------------
  //: Return the curve type
  //---------------------------------------------------------------------------
  virtual vsol_curve_3d_type curve_type(void) const { return vsol_curve_3d::CURVE_NO_TYPE; }

  //***************************************************************************
  // Access
  //***************************************************************************

  //---------------------------------------------------------------------------
  //: Return the first point of `this'
  //---------------------------------------------------------------------------
  virtual vsol_point_3d_ref p0(void) const=0;

  //---------------------------------------------------------------------------
  //: Return the last point of `this'
  //---------------------------------------------------------------------------
  virtual vsol_point_3d_ref p1(void) const=0;

  //***************************************************************************
  // Status report
  //***************************************************************************

  //---------------------------------------------------------------------------
  //: Return the length of `this'
  //---------------------------------------------------------------------------
  virtual double length(void) const=0;

  //***************************************************************************
  // Status setting
  //***************************************************************************

  //---------------------------------------------------------------------------
  //: Set the first point of the curve
  //---------------------------------------------------------------------------
  virtual void set_p0(const vsol_point_3d_ref &new_p0)=0;

  //---------------------------------------------------------------------------
  //: Set the last point of the curve
  //---------------------------------------------------------------------------
  virtual void set_p1(const vsol_point_3d_ref &new_p1)=0;
};

#endif // #ifndef VSOL_CURVE_3D_H
