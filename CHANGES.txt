This file summarizes the conceptual changes being made to VXL. It
should document API changes and deprecations, and other "large"
changes that have an effect on users. Bug fixes and minor changes
aren't documented here, unless the bug-fix has a major observable
effect. If you change something in VXL, please document it here.

---------------------------------------------------------------------------

      - Added several options (e.g. BUILD_CORE_NUMERICS) to the CMakeBuild
        tree to make it easy to build just small parts of VXL.

      - vgel_kl (KLT feature point tracker) now accepts vil1 or vil2 images.

      - Added vil_warp and vil_nearest_neighbour_interp functions

      - Remove vcl_complex hackery on MSVC 6. vcl_complex is now the
        standard <complex>, since it seems to work with VC6sp5.

      - vnl_numeric_limits is deprecated in favour of vcl_numeric_limits.
        (vnl_numeric_limits was written before vcl. vcl_numeric_limits is now
         more robust, and can use platform defaults.)

      - vbl_basic_tuple, vbl_basic_relation, etc. are deprecated since we have
        no decent explanation of how to use them.

      - VXL can now be compiled with MinGW (www.mingw.org).  This can
        be done using the -mno-cygwin option to gcc in Cygwin and
        probably also with the basic MinGW tools as well.

VXL 1.0.0	- October 2003

      - Support for MSVC 7
      - Replaced "vil". The old "vil" is now called "vil1". "vil2" has been
        renamed to "vil".   See the vil chapter in the VXL book for details.
      - vnl_matrix_fixed and vnl_vector_fixed upgraded to be fully space
        efficient.
      - Many hundreds of small bug fixes and improved functionality in the
        core and contributed libraries.

VXL 1.0 beta2	- September 2002

      - CMake is now the default build system.

VXL 1.0 beta1	- November 2000

      - The first official VXL beta release.

VXL 0.1 	- February 2000

      - The very first version of VXL, written from scratch (using pieces of
        TargetJr) during an intensive coding week in Oxford.
