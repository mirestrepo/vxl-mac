#ifndef vnl_matlab_filewrite_h_
#define vnl_matlab_filewrite_h_
#ifdef __GNUC__
#pragma interface
#endif

// .NAME vnl_matlab_filewrite - code to perform MATLAB binary file operations
// .HEADER vxl package
// .LIBRARY vnl
// .INCLUDE vnl/vnl_matlab_filewrite.h
// .FILE vnl_matlab_filewrite.cxx
//
// .SECTION Description
//    vnl_matlab_filewrite is a collection of I/O functions for reading/writing
//    matrices in the compact MATLAB binary format (.mat)
//
// .SECTION Author
//    David Capel, Oxford RRG, 17 August 1998

#include <vcl_string.h>
#include <vcl_iostream.h>
#include <vcl_fstream.h>

#include <vnl/vnl_complex.h>
#include <vnl/vnl_vector.h>
#include <vnl/vnl_matrix.h>

class vnl_matlab_filewrite {
public:
  vnl_matlab_filewrite (char const* file_name, char const *basename = 0);

  // Add scalar/vector/matrix variable to the MAT file using specified
  // variable name. If no name is given, variables will be generated by
  // appending 0,1,2 etc to the given basename.

  void write(double v, char const* variable_name = 0);

  void write(vnl_vector<double> const & v, char const* variable_name = 0);
  void write(vnl_vector<vnl_double_complex> const & v, char const* variable_name = 0);

  void write(vnl_matrix<float> const & M, char const* variable_name = 0);
  void write(vnl_matrix<double> const & M, char const* variable_name = 0);
  void write(vnl_matrix<vnl_float_complex> const & M, char const* variable_name = 0);
  void write(vnl_matrix<vnl_double_complex> const & M, char const* variable_name = 0);

  void write(double const * const *M, int rows, int cols, char const* variable_name = 0);

protected:
  vcl_string basename_;
  int variable_int_;
  vcl_fstream out_;

  vcl_string make_var_name(char const* variable_name);
};

#endif // vnl_matlab_filewrite_h_
