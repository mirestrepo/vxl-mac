#! /bin/sh
exec perl -w -x $0 ${1+"$@"}
#!perl
#line 5

# Purpose: verify that the SOURCE lines in a .dsp file correspond to
# the SOURCES lines in the makefile PLUS the list of Templates files,
# which in turn should correspond to the SOURCE_FILES in CMakeLists.txt.
#
# Command line argument(s): list of directories to check (default: all)

while (defined($ARGV[0]) && $ARGV[0] =~ m/^-/) {
  $_ = shift(@ARGV);
  printf STDERR "Unrecognised command line option $_ ignored\n";
}

if (defined($ARGV[0])) {
  @DIRS = @ARGV;
}
else {
  $IUEROOT = $ENV{IUEROOT};
  unless (defined($IUEROOT)) {
    print STDERR "IUEROOT is not defined, and no command line arguments were given\n";
    exit 0;
  }
  $DIRS = `find \$IUEROOT/vcl \$IUEROOT/v3p \$IUEROOT/vxl \$IUEROOT/mul \$IUEROOT/oxl \$IUEROOT/gel \$IUEROOT/tbl \$IUEROOT/conversions -type d -print`;
  @DIRS = grep {!/(\/CVS|\.new(\/\S+)?|awfmfc|vgui_example_mfc)$/} sort split ' ', $DIRS;
}

foreach $dir (@DIRS)
{
  opendir(TMP,"$dir");
  @tmp_list = readdir(TMP);
  closedir(TMP);
  @source = ();
  @source = ("test_vdgl.cxx") if ($dir =~ m+\bgel/vdgl/tests$+);
  @hsource = ();
  $f = "";
  foreach $fx (@tmp_list) {
    next unless ($fx =~ m/\.dsp$/);
    next unless open(FILE, "$dir/$fx");
    $f .= " $dir/$fx";
    $start = "";
    while(<FILE>) {
      print STDOUT "Line of $dir/$fx does not end in <CR><LF>\n" unless m/\r$/;
      $start = 1  if (m/^\# Begin Group \"Source Files\"/);
      $start = 2  if (m/^\# Begin Group \"Header Files\"/);
      $start = "" if (m/^\# End Group/);
      next if (! $start);
      if (m/^SOURCE=\"?\.\\([^\s\"]+)/) {
        $file = "$1";
        $file =~ s/\\/\//g;
        push @source, $file
          unless ($file eq "CMakeLists.txt" || $start != 1);
        push @hsource, $file
          unless ($file eq "CMakeLists.txt" || $start != 2);
      }
    }
    close FILE;
  }
  $f =~ s/^ //;

  $makef = $dir . "/makefile";
  @sources = ();
  @subdirs = ();
  if (open(MAKEFILE, $makef)) {
    @hsources = ();
    @aux_sources = ("Templates");
    while(<MAKEFILE>) {
      s/\$\(wildcard (.*)\)/$1/g; s/\#.*//; s/\$\([^()]+\)//;
      if (m/^\s*(SOURCES|MINI_PROG_SOURCES|TESTS)\s*\:?\=\s*(\S+)/) {
        $file = "$2";
        @sources = ($file);
        $file =~ s/\.(c|cxx|cc|cpp|C)$/.h/;
        push @hsources, $file if (-f "$dir/$file");
      }
      if (m/^\s*(MANPAGE_SOURCES)\s*\:?\=\s*(\S+)/) {
        $file = "$2";
        push @hsources, $file;
        if ($file =~ m/\.txx$/) {
          $file =~ s/\.txx$/.h/;
          push @hsources, $file if (-f "$dir/$file");
        }
      }
      if (m/^\s*(SOURCES|MINI_PROG_SOURCES|TESTS)\s*\+\=\s*(\S+)/) {
        $file = "$2";
        if ($file eq "\${MOCSOURCES}") {
          opendir(TMP,"$dir");
          @tmp_list = readdir(TMP);
          closedir(TMP);
          foreach $x (@tmp_list) {
            push @sources,"$x" if ($x =~ m/_mocced\.cxx$/);
          }
        }
        else {
          push @sources, $file;
          $file =~ s/\.(c|cxx|cc|cpp|C)$/.h/;
          push @hsources, $file
            if (-f "$dir/$file"
              && $file !~ m/\b(vbl_shared_pointer|vbl_sort|vgl_1d_basis|vil_warp|vnl_matlab_print)\.h$/
              && $file !~ m/\b(mil_gaussian_pyramid_builder_2d(|_general)|mil_image_(2d_of|data|pyramid))\.h$/
              && $file !~ m/\b(osl_canny_smooth)\.h$/);
        }
      }
      if (m/^\s*(MANPAGE_SOURCES)\s*\+\=\s*(\S+)/) {
        $file = "$2";
        push @hsources, $file;
        if ($file =~ m/\.txx$/) {
          $file =~ s/\.txx$/.h/;
          push @hsources, $file if (-f "$dir/$file");
        }
      }
      if (m/^\s*SUBDIRS\s*\:?\=\s*(.+)/) {
        $file = "$1";
        @subdirs = split(/\s+/,"$file");
      }
      if (m/^\s*SUBDIRS\s*\+\=\s*(.+)/) {
        $file = "$1";
        push @subdirs, split(/\s+/,"$file");
      }
      if (m/^\s*AUX_SOURCE_DIRECTORY\s*\+\=\s*(.+)/) {
        $file = "$1";
        push @aux_sources, split(/\s+/,"$file");
      }
      if (m/^\s*AUX_SOURCE_DIRECTORY\s*\:?\=\s*(.+)/) {
        $file = "$1";
        @aux_sources = split(/\s+/,"$file");
      }
    }
    close MAKEFILE;
    # add Templates to sources, if asked
    foreach $subd (@aux_sources) {
      if (opendir(TMPL,"$dir/$subd")) {
        @tmpl_list = readdir(TMPL);
        closedir(TMPL);
  #     @tmpl_list = grep(/\.cxx$/, @tmpl_list);
        foreach $x (@tmpl_list) {
          push @sources, "$subd/$x"
            unless ($x eq "." || $x eq ".." || $x eq "CVS");
        }
      }
    }
  }

  $cmakef = $dir . "/CMakeLists.txt";
  $hcmakef = $dir . "/CMakeListsHeaders.txt";
  $cmakefile = "";
  @source_files = ();
  @hsource_files = ();
  @subdirs2 = ();
  if (open(CMAKEFILE, $cmakef)) {
    $old_v=$/;
    undef $/;
    $cmakefile = <CMAKEFILE>;
    close CMAKEFILE;
    $/=$old_v;
  }
  if (open(CMAKEFILE, $hcmakef)) {
    $old_v=$/;
    undef $/;
    $cmakefile .= <CMAKEFILE>;
    close CMAKEFILE;
    $/=$old_v;
  }
  $cmakefile =~ s/\n\s*\#[^\n]*//g;
  while ($cmakefile =~ s/\bSOURCE_FILES\s*\(\s*\S+sources\s*([^()]+)\)//) {
    @tmpl_list = split /\s+/, "$1";
    foreach $x (@tmpl_list) {
      if ( $x =~ m/\.h$/) { push @hsource_files, "$x"; }
      elsif ( $x =~ m/\.txx$/) { push @hsource_files, "$x"; }
      elsif (-f "$dir/$x") { push @source_files, "$x"; }
      elsif (-f "$dir/$x.cxx") { push @source_files, "$x.cxx"; }
      elsif (-f "$dir/$x.c") { push @source_files, "$x.c"; }
      elsif (-f "$dir/$x.cc") { push @source_files, "$x.cc"; }
      elsif (-f "$dir/$x.C") { push @source_files, "$x.C"; }
      elsif (-f "$dir/$x.cpp") { push @source_files, "$x.cpp"; }
      else { printf "No source file $x.* found in $dir\n"; }
    }
  }
  while ($cmakefile =~ s/\bADD_EXECUTABLE\s*\(\s*\S+\s+(\S+)\s*\)//) {
    $x = "$1";
    next if ($x =~ m/_sources$/);
    if (-f "$dir/$x") { push @source_files, "$x"; }
    elsif (-f "$dir/$x.cxx") { push @source_files, "$x.cxx"; }
    elsif (-f "$dir/$x.c") { push @source_files, "$x.c"; }
    elsif (-f "$dir/$x.cc") { push @source_files, "$x.cc"; }
    elsif (-f "$dir/$x.C") { push @source_files, "$x.C"; }
    elsif (-f "$dir/$x.cpp") { push @source_files, "$x.cpp"; }
    else { printf "No source file $x.* found in $dir\n"; }
  }
  while ($cmakefile =~ s/\bSUBDIRS\s*\(\s*([^()]+)\)//) {
    @tmpl_list = split /\s+/, "$1";
    push @subdirs2, @tmpl_list;
  }
  # add Templates to source_files, if asked
  while ($cmakefile =~ s/\bAUX_SOURCE_DIRECTORY\s*\(\s*(\S+)\s+\S+sources\s*\)//) {
    $file = "$1";
    if (opendir(TMPL,"$dir/$file")) {
      @tmpl_list = readdir(TMPL);
      closedir(TMPL);
#     @tmpl_list = grep(/\.cxx$/, @tmpl_list);
      foreach $x (@tmpl_list) {
        push @source_files, "$file/$x"
          unless ($x eq "." || $x eq ".." || $x eq "CVS");
      }
    }
  }

  next unless ($f || -f $makef || -f $cmakef);
  $f = "$dir/*.dsp" unless ($f);
  print STDOUT "File $makef does not exist\n" unless (-f $makef);
  print STDOUT "File $cmakef does not exist\n" unless (-f $cmakef);

  @source = sort(@source); push @source, "~END";
  @sources = sort(@sources); push @sources, "~END";
  @source_files = sort(@source_files); push @source_files, "~END";
  @hsource = sort(@hsource); push @hsource, "~END";
  @hsources = sort(@hsources); push @hsources, "~END";
  @hsource_files = sort(@hsource_files); push @hsource_files, "~END";
  next if ("@source" eq "@sources" && "@source" eq "@source_files"
        && "@hsource" eq "@hsources" && "@hsource" eq "@hsource_files");
  
  $source=""; $sources=""; $source_files="";
  # Note that shift() removes the *first* element from the list, so we run through
  # the lists in alphabetical order.
  # Hence "~END" is popped off last, and is also alphabetically last.

  # compare file lists
  while (@source || @sources || @source_files) {
    unless ($source eq "~END") {
      $s = shift(@source);
      while ($s eq $source) {
        print STDOUT "multiple occurrence of $s in $f\n"
          unless ("$s" =~ m/^Templates\//);
        $s = shift(@source);
      }
      $source = $s;
    }
    unless ($sources eq "~END") {
      $s = shift(@sources);
      while ($s eq $sources) {
        print STDOUT "multiple occurrence of $s in $makef\n";
        $s = shift(@sources);
      }
      $sources = $s;
    }
    unless ($source_files eq "~END") {
      $s = shift(@source_files);
      while ($s eq $source_files) {
        print STDOUT "multiple occurrence of $s in $cmakef\n";
        $s = shift(@source_files);
      }
      $source_files = $s;
    }
    last if ($source eq "~END" && $sources eq "~END" && $source_files eq "~END");
    next if ($source eq $sources && $source eq $source_files);
    while ($source lt $sources) {
      if (-f "$dir/$source") {
        print STDOUT "SOURCES += $source\tis missing from $makef\n";
      } else {
        print STDOUT "SOURCE=.\\$source\tmust be removed from $f\n";
      }
      $source = shift(@source);
    }
    last if ($source eq "~END" && $sources eq "~END" && $source_files eq "~END");
    next if ($source eq $sources && $source eq $source_files);
    while ($source_files lt $sources) {
      if (-f "$dir/$source_files") {
        print STDOUT "SOURCES += $source_files\tis missing from $makef\n";
      } else {
        $source_files =~ s/\.(cxx|c|C|cpp)$//;
        print STDOUT "SOURCES($source_files)\tmust be removed from $cmakef\n";
      }
      $source_files = shift(@source_files);
    }
    last if ($source eq "~END" && $sources eq "~END" && $source_files eq "~END");
    next if ($source eq $sources && $source eq $source_files);
    while ($sources lt $source || $sources lt $source_files) {
      if (-f "$dir/$sources") {
        if ($sources lt $source) {
          print STDOUT "SOURCE=.\\$sources\tis missing from $f\n"
            unless ($sources eq "tif_unix.c" ||
                    $sources eq "menu_hack_X11.cxx" ||
                    $sources eq "internals/vgui_accelerate_x11.cxx");
        }
        if ($sources lt $source_files) {
          $sources =~ s/\.(cxx|c|C|cpp)$//;
          print STDOUT "SOURCE_FILES($sources)\tis missing from $cmakef\n";
        }
      } else {
        print STDOUT "SOURCES += $sources\tmust be removed from $makef\n"
          unless ($sources eq "\${MOCSOURCES}");
      }
      $source = shift(@source) if ($sources eq $source);
      $source_files = shift(@source_files) if ($sources eq $source_files);
      $sources = shift(@sources);
    }
  }

  # compare header file lists
  $hsource=""; $hsources=""; $hsource_files="";

  while (@hsource || @hsources || @hsource_files) {
    unless ($hsource eq "~END") {
      $s = shift(@hsource);
      while ($s eq $hsource) {
        print STDOUT "multiple occurrence of $s in $f\n"
          unless ("$s" =~ m/^Templates\//);
        $s = shift(@hsource);
      }
      $hsource = $s;
    }
    unless ($hsources eq "~END") {
      $s = shift(@hsources);
      while ($s eq $hsources) {
        print STDOUT "multiple occurrence of $s in $makef\n";
        $s = shift(@hsources);
      }
      $hsources = $s;
    }
    unless ($hsource_files eq "~END") {
      $s = shift(@hsource_files);
      while ($s eq $hsource_files) {
        print STDOUT "multiple occurrence of $s in $hcmakef\n"
          unless ($s =~ m/\bFl_(blender|movie|twowin)_ui\.h$/);
        $s = shift(@hsource_files);
      }
      $hsource_files = $s;
    }
    last if ($hsource eq "~END" && $hsources eq "~END" && $hsource_files eq "~END");
    next if ($hsource eq $hsources && $hsource eq $hsource_files);
    while ($hsource lt $hsources) {
      if (-f "$dir/$hsource") {
        print STDOUT "MANPAGE_SOURCES += $hsource\tis missing from $makef\n";
      } else {
        print STDOUT "SOURCE=.\\$hsource\tmust be removed from $f (header files)\n";
      }
      $hsource = shift(@hsource);
    }
    last if ($hsource eq "~END" && $hsources eq "~END" && $hsource_files eq "~END");
    next if ($hsource eq $hsources && $hsource eq $hsource_files);
    while ($hsource_files lt $hsources) {
      if (-f "$dir/$hsource_files") {
        print STDOUT "MANPAGE_SOURCES += $hsource_files\tis missing from $makef\n";
      } else {
        print STDOUT "SOURCES($hsource_files)\tmust be removed from $hcmakef\n";
      }
      $hsource_files = shift(@hsource_files);
    }
    last if ($hsource eq "~END" && $hsources eq "~END" && $hsource_files eq "~END");
    next if ($hsource eq $hsources && $hsource eq $hsource_files);
    while ($hsources lt $hsource || $hsources lt $hsource_files) {
      if (-f "$dir/$hsources") {
        if ($hsources lt $hsource) {
          print STDOUT "SOURCE=.\\$hsources\tis missing from $f (header files)\n";
        }
        if ($hsources lt $hsource_files) {
          print STDOUT "SOURCE_FILES($hsources)\tis missing from $hcmakef\n";
        }
      } else {
        print STDOUT "MANPAGE_SOURCES += $hsources\tmust be removed from $makef\n";
      }
      $hsource = shift(@hsource) if ($hsources eq $hsource);
      $hsource_files = shift(@hsource_files) if ($hsources eq $hsource_files);
      $hsources = shift(@hsources);
    }
  }

  # compare SUBDIRS lists
  @subdirs = sort(@subdirs); push @subdirs, "~END";
  @subdirs2 = sort(@subdirs2); push @subdirs2, "~END";
  $subdirs=""; $subdirs2="";
  while (@subdirs || @subdirs2) {
    $subdirs = shift(@subdirs) unless ($subdirs eq "~END");
    $subdirs2 = shift(@subdirs2) unless ($subdirs2 eq "~END");
    last if ($subdirs eq "~END" && $subdirs2 eq "~END");
    next if ($subdirs eq $subdirs2);
    while ($subdirs lt $subdirs2) {
      if (-d "$dir/$subdirs") {
        print STDOUT "SUBDIRS($subdirs)\tis missing from $cmakef\n";
      } else {
        print STDOUT "SUBDIRS += $subdirs\tmust be removed from $makef\n";
      }
      $subdirs = shift(@subdirs);
    }
    last if ($subdirs eq "~END" && $subdirs2 eq "~END");
    next if ($subdirs eq $subdirs2);
    while ($subdirs2 lt $subdirs) {
      if (-d "$dir/$subdirs2") {
        print STDOUT "SUBDIRS += $subdirs2\tis missing from $makef\n";
      } else {
        print STDOUT "SUBDIRS($subdirs2)\tmust be removed from $cmakef\n";
      }
      $subdirs2 = shift(@subdirs2);
    }
  }
}
