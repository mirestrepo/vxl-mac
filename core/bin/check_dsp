#! /bin/sh
exec perl -w -x $0 ${1+"$@"}
#!perl
#line 5

# Purpose: verify that the SOURCE lines in a .dsp file correspond to
# the SOURCES lines in the makefile PLUS the list of Templates files,
# which in turn should correspond to the SOURCE_FILES in CMakeLists.txt.
#
# Command line argument(s): list of directories to check (default: all)

while (defined($ARGV[0]) && $ARGV[0] =~ m/^-/) {
  $_ = shift(@ARGV);
  printf STDERR "Unrecognised command line option $_ ignored\n";
}

if (defined($ARGV[0])) {
  @DIRS = @ARGV;
}
else {
  $IUEROOT = $ENV{IUEROOT};
  unless (defined($IUEROOT)) {
    print STDERR "IUEROOT is not defined, and no command line arguments were given\n";
    exit 0;
  }
  $DIRS = `find $IUEROOT/vcl $IUEROOT/v3p $IUEROOT/vxl $IUEROOT/mul $IUEROOT/oxl $IUEROOT/gel $IUEROOT/tbl $IUEROOT/conversions -type d -print | /bin/fgrep -v /CVS/`;
  @DIRS = sort(split(' ', $DIRS));
}

foreach $dir (@DIRS)
{
  opendir(TMP,"$dir");
  @tmp_list = readdir(TMP);
  closedir(TMP);
  @source = ();
  $f = "";
  foreach $fx (@tmp_list) {
    next unless ($fx =~ m/\.dsp$/);
    next unless open(FILE, "$dir/$fx");
    $f .= " $dir/$fx";
    $start = "";
    while(<FILE>) {
      $start = 1  if (m/^\# Begin Group \"Source Files\"/);
      $start = "" if (m/^\# End Group/);
      next if (! $start);
      if (m/^SOURCE=\"?\.\\([^\s\"]+)/) {
        $file = "$1";
        $file =~ s/\\/\//g;
        @source = (@source, $file);
      }
    }
    close FILE;
  }
  $f =~ s/^ //;

  $makef = $dir . "/makefile";
  @sources = ();
  @subdirs = ();
  if (open(MAKEFILE, $makef)) {
    @aux_sources = ("Templates");
    while(<MAKEFILE>) {
      s/\$\(wildcard (.*)\)/$1/g; s/\#.*//;
      if (m/^\s*(SOURCES|MINI_PROG_SOURCES|TESTS)\s*\:?\=\s*(\S+)/) {
        $file = "$2";
        @sources = ($file);
      }
      if (m/^\s*(SOURCES|MINI_PROG_SOURCES|TESTS)\s*\+\=\s*(\S+)/) {
        $file = "$2";
        if ($file eq "\${MOCSOURCES}") {
          opendir(TMP,"$dir");
          @tmp_list = readdir(TMP);
          closedir(TMP);
          foreach $x (@tmp_list) {
            @sources = (@sources, "$x") if ($x =~ m/_mocced\.cxx$/);
          }
        }
        else { @sources = (@sources, $file); }
      }
      if (m/^\s*SUBDIRS\s*\:?\=\s*(.+)/) {
        $file = "$1";
        @subdirs = (split(/\s+/,"$file"));
      }
      if (m/^\s*SUBDIRS\s*\+\=\s*(.+)/) {
        $file = "$1";
        @subdirs = (@subdirs, split(/\s+/,"$file"));
      }
      if (m/^\s*AUX_SOURCE_DIRECTORY\s*\+\=\s*(.+)/) {
        $file = "$1";
        @aux_sources = (@aux_sources, split(/\s+/,"$file"));
      }
      if (m/^\s*AUX_SOURCE_DIRECTORY\s*\:?\=\s*(.+)/) {
        $file = "$1";
        @aux_sources = (split(/\s+/,"$file"));
      }
    }
    close MAKEFILE;
    # add Templates to sources, if asked
    foreach $subd (@aux_sources) {
      if (opendir(TMPL,"$dir/$subd")) {
        @tmpl_list = readdir(TMPL);
        closedir(TMPL);
  #     @tmpl_list = grep(/\.cxx$/, @tmpl_list);
        foreach $x (@tmpl_list) {
          @sources = (@sources, "$subd/$x")
            unless ($x eq "." || $x eq ".." || $x eq "CVS");
        }
      }
    }
  }

  $cmakef = $dir . "/CMakeLists.txt";
  $cmakefile = "";
  @source_files = ();
  @subdirs2 = ();
  if (open(CMAKEFILE, $cmakef)) {
    $old_v=$/;
    undef $/;
    $cmakefile = <CMAKEFILE>;
    close CMAKEFILE;
    $/=$old_v;
  }
  $cmakefile =~ s/\#.*\n//g;
  while ($cmakefile =~ s/\bSOURCE_FILES\s*\(\s*\S+sources\s*([^()]+)\)//) {
    @tmpl_list = split(/\s+/, "$1");
    foreach $x (@tmpl_list) {
      if (-f "$dir/$x") { @source_files = (@source_files, "$x"); }
      elsif (-f "$dir/$x.cxx") { @source_files = (@source_files, "$x.cxx"); }
      elsif (-f "$dir/$x.c") { @source_files = (@source_files, "$x.c"); }
      elsif (-f "$dir/$x.C") { @source_files = (@source_files, "$x.C"); }
      elsif (-f "$dir/$x.cpp") { @source_files = (@source_files, "$x.cpp"); }
      else { printf "No source file $x.* found in $dir\n"; }
    }
  }
  while ($cmakefile =~ s/\bADD_EXECUTABLE\s*\(\s*\S+\s+(\S+)\s*\)//) {
    $x = "$1";
    next if ($x =~ m/_sources$/);
    if (-f "$dir/$x") { @source_files = (@source_files, "$x"); }
    elsif (-f "$dir/$x.cxx") { @source_files = (@source_files, "$x.cxx"); }
    elsif (-f "$dir/$x.c") { @source_files = (@source_files, "$x.c"); }
    elsif (-f "$dir/$x.C") { @source_files = (@source_files, "$x.C"); }
    elsif (-f "$dir/$x.cpp") { @source_files = (@source_files, "$x.cpp"); }
    else { printf "No source file $x.* found in $dir\n"; }
  }
  while ($cmakefile =~ s/\bSUBDIRS\s*\(\s*([^()]+)\)//) {
    @tmpl_list = split(/\s+/, "$1");
    @subdirs2 = (@subdirs2, @tmpl_list);
  }
  # add Templates to source_files, if asked
  while ($cmakefile =~ s/\bAUX_SOURCE_DIRECTORY\s*\(\s*(\S+)\s+\S+sources\s*\)//) {
    $file = "$1";
    if (opendir(TMPL,"$dir/$file")) {
      @tmpl_list = readdir(TMPL);
      closedir(TMPL);
#     @tmpl_list = grep(/\.cxx$/, @tmpl_list);
      foreach $x (@tmpl_list) {
        @source_files = (@source_files, "$file/$x")
          unless ($x eq "." || $x eq ".." || $x eq "CVS");
      }
    }
  }

  next unless ($f || -f $makef || -f $cmakef);
  $f = "$dir/*.dsp" unless ($f);
  print STDOUT "File $makef does not exist\n" unless (-f $makef);
  print STDOUT "File $cmakef does not exist\n" unless (-f $cmakef);

  @source = sort(@source); @source = (" END ", @source);
  @sources = sort(@sources); @sources = (" END ", @sources);
  @source_files = sort(@source_files); @source_files = (" END ", @source_files);
  $source=""; $sources=""; $source_files="";
  # Note that pop() removes the *last* element from the list, so we run through
  # the lists in reverse alphabetic order.
  # Hence " END " is certainly alphabetically first, and is popped off last.

  # compare file lists
  while (@source || @sources || @source_files) {
    $source = pop(@source) unless ($source eq " END ");
    $sources = pop(@sources) unless ($sources eq " END ");
    $source_files = pop(@source_files) unless ($source_files eq " END ");
    last if ($source eq " END " && $sources eq " END " && $source_files eq " END ");
    next if ($source eq $sources && $source eq $source_files);
    while ($source gt $sources) {
      if (-f "$dir/$source") {
        print STDOUT "SOURCES += $source\tis missing from $makef\n";
      } else {
        print STDOUT "SOURCE=.\\$source\tmust be removed from $f\n";
      }
      $source = pop(@source);
    }
    last if ($source eq " END " && $sources eq " END " && $source_files eq " END ");
    next if ($source eq $sources && $source eq $source_files);
    while ($source_files gt $sources) {
      if (-f "$dir/$source_files") {
        print STDOUT "SOURCES += $source_files\tis missing from $makef\n";
      } else {
        $source_files =~ s/\.(cxx|c|C|cpp)$//;
        print STDOUT "SOURCES($source_files)\tmust be removed from $cmakef\n";
      }
      $source_files = pop(@source_files);
    }
    last if ($source eq " END " && $sources eq " END " && $source_files eq " END ");
    next if ($source eq $sources && $source eq $source_files);
    while ($sources gt $source || $sources gt $source_files) {
      if (-f "$dir/$sources") {
        if ($sources gt $source) {
          print STDOUT "SOURCE=.\\$sources\tis missing from $f\n"
            unless ($sources eq "tif_unix.c" ||
                    $sources eq "menu_hack_X11.cxx" ||
                    $sources eq "internals/vgui_accelerate_x11.cxx");
        }
        if ($sources gt $source_files) {
          $sources =~ s/\.(cxx|c|C|cpp)$//;
          print STDOUT "SOURCE_FILES($sources)\tis missing from $cmakef\n";
        }
      } else {
        print STDOUT "SOURCES += $sources\tmust be removed from $makef\n"
          unless ($sources eq "\${MOCSOURCES}");
      }
      $source = pop(@source) if ($sources eq $source);
      $source_files = pop(@source_files) if ($sources eq $source_files);
      $sources = pop(@sources);
    }
  }

  # compare SUBDIRS lists
  @subdirs = sort(@subdirs); @subdirs = (" END ", @subdirs);
  @subdirs2 = sort(@subdirs2); @subdirs2 = (" END ", @subdirs2);
  $subdirs=""; $subdirs2="";
  while (@subdirs || @subdirs2) {
    $subdirs = pop(@subdirs) unless ($subdirs eq " END ");
    $subdirs2 = pop(@subdirs2) unless ($subdirs2 eq " END ");
    last if ($subdirs eq " END " && $subdirs2 eq " END ");
    next if ($subdirs eq $subdirs2);
    while ($subdirs gt $subdirs2) {
      if (-d "$dir/$subdirs") {
        print STDOUT "SUBDIRS($subdirs)\tis missing from $cmakef\n";
      } else {
        print STDOUT "SUBDIRS += $subdirs\tmust be removed from $makef\n";
      }
      $subdirs = pop(@subdirs);
    }
    last if ($subdirs eq " END " && $subdirs2 eq " END ");
    next if ($subdirs eq $subdirs2);
    while ($subdirs2 gt $subdirs) {
      if (-d "$dir/$subdirs2") {
        print STDOUT "SUBDIRS += $subdirs2\tis missing from $makef\n";
      } else {
        print STDOUT "SUBDIRS($subdirs2)\tmust be removed from $cmakef\n";
      }
      $subdirs2 = pop(@subdirs2);
    }
  }
}
