VXL makes heavy use of the C++ template mechanism.  In order to ensure
efficient compilation and linking a scheme has been adopted in which
the declaration of each templated class is placed in a .h file, and
its definition (implementation) is separated into a .txx file.
The latter is only read a small number of times, when a particular
instantiation of a template is created.

Each specialisation of the templated class must be compiled explicitly.
This is usually done by creating an explicit instantiation in a file in the
Templates subdirectory.

For example, vgl_point_2d<T> has a header file, vgl/vgl_point_2d.h, and an implementation
in vgl/vgl_point_2d.txx.  At the end of the latter is a macro which can be used to
explicitly instantiation a particular specialisation of vgl_point_2d, together with
all the associated templated functions:

@example
File: vgl/vgl_point_2d.txx:
...

#define VGL_POINT_2D_INSTANTIATE(T) \
template class vgl_point_2d<T>; \
template vcl_ostream& operator<<(vcl_ostream&, const vgl_point_2d<T>&); \
template vcl_istream& operator>>(vcl_istream&, vgl_point_2d<T>&); \
template void vsl_print_summary(vcl_ostream &, const vgl_point_2d<T> &); \
template void vsl_b_read(vcl_istream &, vgl_point_2d<T> &); \
template void vsl_b_write(vcl_ostream &, const vgl_point_2d<T> &); \
;
@end example

To instantiate a vgl_point_2d<double> there is a file in the vgl/Templates directory:

@example
File: vgl/Templates/vgl_point_2d+double-.cxx:

// Instantiation of vgl_point_2d<double>
#include <vgl/vgl_point_2d.txx>
VGL_POINT_2D_INSTANTIATE(double);
@end example

If you decided to use an unusual specialization, eg vgl_point_2d<my_sponge>, your
code should compile cleanly, but would not link unless somewhere you explicitly
instantiate the class and compile it somewhere suitable using a call:

@example
VGL_POINT_2D_INSTANTIATE(my_sponge);
@end example

When you write a new templated class (or function), you should put the implementation
in a suitable .txx, together with an appropriate INSTANTIATE macro.  Study examples
in existing classes for more details.
