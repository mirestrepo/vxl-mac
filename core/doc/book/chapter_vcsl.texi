@chapsummary
Metric entities, co-ordinate systems and transformations.
@endchapsummary

This non-core Level 2 library @code{vcsl} is intended to provide an environment
for representing co-ordinate systems, transformations, dimensions, and metric
units.

This includes classes for
@itemize @bullet
@item Radians, degrees, and metres.
@item 2D and 3D cartesian co-ordinate systems
@item Various polar co-ordinate systems
@item Various geographic co-ordinate systems.
@item Various Transformations
@end itemize


@subsection Metric and Dimensional classes

@itemize @bullet
  @item @code{vcsl_dimension} - Abstract dimension
  @itemize @bullet
    @item @code{vcsl_length}
    @item @code{vcsl_angle}
  @end itemize

  @item @code{vcsl_unit} - Abstract unit associated to a dimension
  @itemize @bullet
    @item @code{vcsl_length_unit}
    @itemize @bullet
      @item @code{vcsl_metre} - This is the standard length unit
    @end itemize
    @item @code{vcsl_angle_unit}
    @itemize @bullet
      @item @code{vcsl_radian} - This is the standard angular unit
      @item @code{vcsl_degree}
    @end itemize
  @end itemize
@end itemize

@subsection Co-ordinate Systems and Transformations
@itemize @bullet
  @item @code{vcsl_coordinate_system}
  @itemize @bullet
    @item @code{vcsl_cartesian_2d}
    @item @code{vcsl_cartesian_3d}
    @item @code{vcsl_cylindrical}
    @item @code{vcsl_polar}
    @item @code{vcsl_spherical}
    @item @code{vcsl_geographic}
    @itemize @bullet
      @item @code{vcsl_geocentric} - Intended to represent a location relative to the earth
      @item @code{vcsl_geodetic} - Intended to represent a location relative to the earth
      @item @code{vcsl_lambertian} - Lambert Conformal Conic Projection
      @item @code{vcsl_utm} - Universal Transverse Mercator projection
    @end itemize
  @end itemize

  @item @code{vcsl_spatial_transformation}
  @itemize @bullet
    @item @code{vcsl_cylindrical_to_cartesian_3d}
    @item @code{vcsl_perspective}
    @item @code{vcsl_rotation} - Rotation about an axis through the origin
    @itemize @bullet
      @item @code{vcsl_displacement} - Rotation about a general axis
    @end itemize
    @item @code{vcsl_scale}
    @item @code{vcsl_translation}
    @item @code{vcsl_composition} - Composition of transformations
  @end itemize

  @item @code{vcsl_graph} - Represent multiple co-ordinate systems and transformation between them.

@end itemize

@section Further Work

@enumerate
@item Write conversion between classic coordinate systems in the same than the
class vcsl_cylindrical_to_cartesian_3d (singleton pattern)
    @itemize @bullet
    @item vcsl_spherical_to_cartesian_3d
    @item vcsl_polar_to_cartesian_2d
    @item vcsl_geocentric_to_cartesian_3d
    @item vcsl_geodetic_to_cartesian_3d
    @item vcsl_lambertian_to_cartesian_3d
    @item vcsl_utm_to_cartesian_3d
    @end itemize

@item Add other units and dimensions

@item In vcsl_spatial_transformation, add
@example
//: May `this' have a matrix representation ?
virtual bool is_linear(void) const=0;

//: Homogeneous matrix of `this' at time `time'
// REQUIRE: is_valid()
// REQUIRE: is_linear()
virtual vnl_matrix<double> *matrix(const double time) const;
@end example
@end enumerate
