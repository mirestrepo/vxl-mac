*******************************************************************************
VCSL: Coordinate Systems
*******************************************************************************

VCSL provides classes to handle coordinate systems and transformations
(static or dynamic)

The classes are:

Dimensions                                      Standard Unit Other Units

vcsl_dimension:               vcsl_unit:
               vcsl_angle     vcsl_angle_unit:  vcsl_radian   vcsl_degree
               vcsl_length    vcsl_length_unit: vcsl_meter

vcsl_axis

vcsl_coordinate_system:cartesian
                       vcsl_spatial:vcsl_cartesian_2d
                                    vcsl_cartesian_3d
                                    vcsl_cylindrical
                                    vcsl_spherical
                                    vcsl_polar
                                    vcsl_geographic:vcsl_geocentric
                                    vcsl_geodetic
                                    vcsl_lambertian
                                    vcsl_utm

vcsl_spatial_transformation:vcsl_cylindrical_to_cartesian_3d
                            vcsl_composition
                            vcsl_displacement
                            vcsl_perspective
                            vcsl_rotation
                            vcsl_scale
                            vcsl_translation

vcsl_graph

-------------------------------------------------------------------------------
TODO

1. write conversion between classic coordinate systems in the same than the
class vcsl_cylindrical_to_cartesian_3d (singleton pattern)

vcsl_spherical_to_cartesian_3d
vcsl_polar_to_cartesian_2d
vcsl_geocentric_to_cartesian_3d
vcsl_geodetic_to_cartesian_3d
vcsl_lambertian_to_cartesian_3d
vcsl_utm_to_cartesian_3d

2. Add other units and dimensions

3. In vcsl_spatial_transformation, add

//: May `this' have a matrix representation ?
virtual bool is_linear(void) const=0;

//: Homogeneous matrix of `this' at time `time'
//: REQUIRE: is_valid()
//: REQUIRE: is_linear()
virtual vnl_matrix<double> *matrix(const double time) const;
