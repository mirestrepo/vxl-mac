#!/bin/sh
# -*- perl -*-
exec perl -w -x $0 ${1+"$@"}
#!perl
#line 6
# If Windows barfs at line 3 here, you will need to run perl -x this_file.pl
# You can set up as a permanent file association using the following commands
#  >assoc .pl=PerlScript
#  >ftype PerlScript=C:\Perl\bin\Perl.exe -x "%1" %*

use Cwd;
use Getopt::Std;


# ---------------------------------------------------------------
# find_test_directories($base_dir, $rel_dir,$output_dir,$exe_dir)
# ---------------------------------------------------------------

sub find_test_directories
{
  my ($base_dir, $rel_dir,$output_dir, $exe_dir)= @_;
  chdir("$base_dir/$rel_dir") || die "Unable to chdir to $base_dir/$rel_dir\n";
  opendir(DOT,".");

  foreach (readdir(DOT))
  {
    if(( $_ ne ".") && ( $_ ne ".."))
    {
      if (!$rel_dir)
      {  $new_dir= $_; }
      else
      {  $new_dir= "$rel_dir/$_"; }

      $path = "$base_dir/$new_dir";
      if (-d $path && ! -l $path)
      {
        if ($_ eq "tests")
        {
           run_all_tests($base_dir, $new_dir,$output_dir, $exe_dir);
        }

        find_test_directories($base_dir, $new_dir,$output_dir, $exe_dir);
      }
    }
  }

  closedir(DOT);

  return;
}

# ---------------------------------------------------------------
# run_test($base_dir, $rel_dir,$output_dir, $exe_dir,$test_prog)
# ---------------------------------------------------------------
sub run_test
{
  my ($base_dir, $rel_dir,$output_dir, $exe_dir,$test_prog)=@_;
  my $test_dir = "$base_dir/$rel_dir/$exe_dir";

  # Constuct name for output file (replace / with _)
  my $test_name = "$rel_dir/$test_prog.txt";
  $test_name =~ s/\//+/g;
  $test_path = "$output_dir/$test_name";

  chdir($test_dir);

  print SUMMARYFILE "<tr>\n";

  if ($OS =~ /Windows/)
  {
    `$test_prog > $test_path 2>&1 `;
  }
  else
  {
    `./$test_prog > $test_path 2>&1 `;
  }

#   print SUMMARYFILE "Results saved to $test_name\n";

    $n_test_progs = $n_test_progs + 1;

  if ( $? == 0 )
  {
    print SUMMARYFILE "<td>$rel_dir/$test_prog</td>";
      print SUMMARYFILE "<td>Success!!</td>";
        $n_test_progs_ok = $n_test_progs_ok + 1;
  }
  else
  {
    print SUMMARYFILE qq%<td><font color="#FF0000">%;
    print SUMMARYFILE "$rel_dir/$test_prog</td>";
    print SUMMARYFILE qq%<td><font color="#FF0000">%;
    print SUMMARYFILE "FAILED!!</td>";
  }

  $n_ok = 0;
  $nt   = 0;

  open(RESFILE,"<$test_path") || die "Can't open results file $test_path";

  while (<RESFILE>)
  {
    chomp;
    if ($_ =~ /Test Summary/)
    {
      $nt = $_;
      $nt =~ s/(.*Test Summary[^0-9]*)([0-9]+)( tests succeed.*)/$2/;
      $n_ok = $nt;

      # Check for case where some fail
      if (! /Test Summary: All/)
      {
        $n_fail = $_;
        $n_fail =~ s/(.*succeeded\, )([0-9]+)( tests did.*)/$2/;
        $nt = $n_ok + $n_fail;
      }

      $n_tests = $n_tests + $nt;
      $n_tests_ok = $n_tests_ok + $n_ok;
    }
  }
  close(RESFILE);

  print SUMMARYFILE "<td align=center>";
  print_link($n_ok,$test_name);
  print SUMMARYFILE "</td>";
  print SUMMARYFILE "<td align=center>";
  print_link($nt,$test_name);
  print SUMMARYFILE "</td>";
  print SUMMARYFILE "</tr>\n";
}

# ---------------------------------------------------------------
# run_all_tests($base_dir, $rel_dir,$output_dir, $exe_dir)
# Run all programs in given directory
# ---------------------------------------------------------------
sub run_all_tests
{
  my ($base_dir, $rel_dir,$output_dir, $exe_dir)=@_;
  my $test_dir = "$base_dir/$rel_dir/$exe_dir";

  chdir($test_dir);

#  print SUMMARYFILE "Tests in $test_dir:<br>\n";

  opendir(TESTDIR,".");

  foreach (readdir(TESTDIR))
  {
    if (-x && !-d  && !m/\.s[ol]$/ && !-l)
    {
      run_test($base_dir, $rel_dir,$output_dir, $exe_dir,$_);
    }
  }

  closedir(TESTDIR);
}

#-----------------------------------------------------------
sub print_header
{
  my ($dir) = @_;
  print SUMMARYFILE  "<html>\n";
  print SUMMARYFILE  "<body>\n";
  print SUMMARYFILE  "<h1>Results of running tests in $dir</h1>\n";
  print SUMMARYFILE  "<HR>";
  print SUMMARYFILE  "<P>";
}

#-----------------------------------------------------------
# print_link($text, $link)

sub print_link
{
  my ($text, $link)  = @_;
  print SUMMARYFILE "<a href=\"";
  print SUMMARYFILE $link;
  print SUMMARYFILE "\"> $text";
  print SUMMARYFILE '</a>' , "\n";
}

sub print_tail()
{
  print SUMMARYFILE '<p>';
  print SUMMARYFILE  "<HR>";
  print SUMMARYFILE  "Results generated by <em>table_tests.pl</em> on \n";
  $date = localtime(time());
  print SUMMARYFILE $date;
  print SUMMARYFILE  "<HR>";
  print SUMMARYFILE  "</body>";
  print SUMMARYFILE  "</html>\n";
}

#-----------------------------------------------------------
# ($n_test_progs,$n_test_progs_ok,$n_tests,$n_tests_ok)
# = run_tests_below_dir($base_dir, $output_dir,$exe_dir)
#-----------------------------------------------------------

sub run_tests_below_dir
{
  my ($base_dir, $output_dir,$exe_dir) = @_;

  $summary_file = "$output_dir/index.html";
  open(SUMMARYFILE,">$summary_file") || die "Can't open $summary_file";


  $n_test_progs = 0;
  $n_test_progs_ok = 0;
  $n_tests = 0;
  $n_tests_ok = 0;

  print_header($base_dir);

  print SUMMARYFILE "<table BORDER>\n";
  print SUMMARYFILE "<tr>\n";
  print SUMMARYFILE "<td>Test</td><td>Result</td><td>N.Passed</td><td>Total Tests</td>\n";

  find_test_directories($base_dir,"",$output_dir,$exe_dir);

  print SUMMARYFILE "</table>\n";

  $n_failed = $n_tests - $n_tests_ok;

  print "\nOutput placed in $output_dir\n";
  print "\nPlease see $output_dir/index.html\n";
# print "\n";
# print "==========================================================\n";
# print "$n_test_progs_ok of $n_test_progs test programmes successful.\n";
# print "$n_tests_ok of $n_tests individual tests passed.\n";
# print "$n_failed individual tests failed.\n";
# print "==========================================================\n";

  print SUMMARYFILE "<h2>Summary</h2>\n";
  print SUMMARYFILE "<p>\n";
  print SUMMARYFILE "$n_test_progs_ok of $n_test_progs test programmes successful.<br>\n";
  print SUMMARYFILE "$n_tests_ok of $n_tests individual tests passed.<br>\n";
  print SUMMARYFILE "$n_failed individual tests failed.<br>\n";

  print_tail();

  close(SUMMARYFILE);

  return ($n_test_progs,$n_test_progs_ok,$n_tests,$n_tests_ok);
}

#-----------------------------------------------------------
# run_recursive($base_dir, $rel_dir, $output_dir,$exe_dir, $depth)
#-----------------------------------------------------------

sub run_recursive
{
  my ($base_dir, $rel_dir, $output_dir,$exe_dir, $depth)= @_;
  my $new_rel_dir;
  my $new_output_dir;
  my $dir = "$base_dir/$rel_dir";
  if (!$rel_dir) { $dir = $base_dir; }

  # don't follow softlinks
  if (-l $dir) { return;}

  if ($depth == 0)
  {
    print "Got to $dir\n";
    my ($n_test_progs,$n_test_progs_ok,$n_tests,$n_tests_ok)
      = run_tests_below_dir($dir, $output_dir,$exe_dir);
    print "==========================================================\n";
    print "$n_test_progs_ok of $n_test_progs test programmes successful.\n";
    print "$n_tests_ok of $n_tests individual tests passed.\n";
    print "==========================================================\n";

    if ($n_test_progs == 0) { return; }

    $total_n_test_progs = $total_n_test_progs + $n_test_progs;
    $total_n_test_progs_ok = $total_n_test_progs_ok + $n_test_progs_ok;
    $total_n_tests = $total_n_tests + $n_tests;
    $total_n_tests_ok = $total_n_tests_ok + $n_tests_ok;

    $index_file = "$rel_dir/index.html";

    print MAININDEX "<tr>\n";

    if ( $n_test_progs == $n_test_progs_ok &&  $n_tests == $n_tests_ok)
    {
      print MAININDEX "<td>";
      print_index_link($rel_dir,$index_file);
      print MAININDEX "</td><td>Success!</td>\n";
    }
    else
    {
      print MAININDEX qq%<td><font color="#FF0000">%;
      print_index_link($rel_dir,$index_file);
      print MAININDEX qq%</td><td><font color="#FF0000">Failures!</td>%;
    }
    print MAININDEX "<td align=center>";
    print_index_link($n_test_progs_ok,$index_file);
    print MAININDEX "</td><td align=center>";
    print_index_link($n_test_progs,$index_file);
    print MAININDEX "</td><td align=center>\n";
    print_index_link($n_ok,$index_file);
    print MAININDEX "</td><td align=center>";
    print_index_link($nt,$index_file);
    print MAININDEX "</td></tr>\n";

    return;
  }

  chdir $dir || die "Unable to chdir to $dir\n";

  opendir(DOT,".");

  foreach (readdir(DOT))
  {
    if(( $_ ne ".") && ( $_ ne ".."))
    {
      $new_rel_dir= "$rel_dir/$_";
      if (!$rel_dir) { $new_rel_dir = $_; }

      if (-d "$dir/$_")
      {
        $new_output_dir= "$output_dir/$_";
        mkdir $new_output_dir,0777 || die "Unable to mkdir $new_output_dir\n";

        run_recursive($base_dir,$new_rel_dir,$new_output_dir, $exe_dir, $depth-1);
      }
    }
  }

  closedir(DOT);
}

#-----------------------------------------------------------
# print_index_link($text, $link)

sub print_index_link
{
  my ($text, $link)  = @_;
  print MAININDEX "<a href=";
  print MAININDEX $link;
  print MAININDEX "> $text";
  print MAININDEX '</a>' , "\n";
}

sub start_main_index
{
  my ($output_dir) = @_;
  my $index_file = "$output_dir/index.html";
  open(MAININDEX,">$index_file") || die "Can't open $index_file";
  print MAININDEX  "<html>\n";
  print MAININDEX  "<body>\n";
  print MAININDEX  "<h1>Results of running tests</h1>\n";
  print MAININDEX  "<HR>";
  print MAININDEX  "<P>";

  print MAININDEX "<table BORDER>\n";
  print MAININDEX "<tr>\n";
  print MAININDEX "<td>Test</td><td>Result</td><td>N.Progs.OK</td><td>Total N.Progs</td>\n";
  print MAININDEX "<td>N.Tests OK</td><td>Total Tests</td>\n";

  $total_n_test_progs = 0;
  $total_n_test_progs_ok = 0;
  $total_n_tests = 0;
  $total_n_tests_ok = 0;
}

sub end_main_index
{
  print MAININDEX "</table>\n";

  print MAININDEX "<h2>Summary</h2>\n";
  print MAININDEX "<p>\n";
  print MAININDEX "$total_n_test_progs_ok of $total_n_test_progs test programmes successful.<br>\n";
  print MAININDEX "$total_n_tests_ok of $total_n_tests individual tests passed.<br>\n";

  print MAININDEX '<p>';
  print MAININDEX  "<HR>";
  print MAININDEX  "Results generated by <em>table_tests.pl</em> on \n";
  $date = localtime(time());
  print MAININDEX $date;
  print MAININDEX  "<HR>";
  print MAININDEX  "</body>";
  print MAININDEX  "</html>\n";

  close(MAININDEX);
}

#-----------------------------------------------------------
# Main
#-----------------------------------------------------------
use Env qw(OS);
my %options;
getopts('d:o:e:r:', \%options);

my $base_dir = $options{d} || "";
my $output_dir = $options{o} || "";
my $exe_dir = $options{e} || ".";
my $depth = $options{r} || "0";

if( ! $base_dir || ! $output_dir)
{
  print "Usage: vxl_run_tests.pl -d base_dir -o output_dir [-e exe_dir] [-r depth]\n";
  print "Searches for each directory called tests below base_dir\n";
  print "exe_dir should be Release or Debug under Windows (not required by Unix)\n";
  print "For each tests directory, runs all the executables in it \n";
  print "(or the sub directory exe_dir) and outputs the results to output_dir.\n";
  print "A summary document is created in output_dir/index.html\n";
  print "If depth supplied, and is greater than 1, then recurse to the given\n";
  print "depth from base_dir before generating the tests, and generate a main\n";
  print "index page (output_dir/index.html)\n";
  exit(1);
}

if ( !defined($OS) )
{
  $OS = "Unix";
}

# $dir should be full path - replace . with current working directory
if ($base_dir eq ".")
{
  $base_dir = cwd();
}

$base_dir=~ s/\/*\s*$//;

# Check output directory exists or can be created
if (! -e $output_dir)
{
  mkdir $output_dir,0777 || die "Unable to create directory $output_dir\n";
}

if ($depth == 0)
{
  run_tests_below_dir($base_dir, $output_dir,$exe_dir);
}
else
{
  start_main_index($output_dir);
  run_recursive($base_dir, "", $output_dir,$exe_dir,$depth);
  end_main_index();
}

exit(1);
